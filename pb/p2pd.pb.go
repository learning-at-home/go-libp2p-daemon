// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2pd.proto

package p2pd_pb

import (
	fmt "fmt"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Request_Type int32

const (
	Request_IDENTIFY                Request_Type = 0
	Request_CONNECT                 Request_Type = 1
	Request_STREAM_OPEN             Request_Type = 2
	Request_STREAM_HANDLER          Request_Type = 3
	Request_DHT                     Request_Type = 4
	Request_LIST_PEERS              Request_Type = 5
	Request_CONNMANAGER             Request_Type = 6
	Request_DISCONNECT              Request_Type = 7
	Request_PUBSUB                  Request_Type = 8
	Request_PERSISTENT_CONN_UPGRADE Request_Type = 9
)

var Request_Type_name = map[int32]string{
	0: "IDENTIFY",
	1: "CONNECT",
	2: "STREAM_OPEN",
	3: "STREAM_HANDLER",
	4: "DHT",
	5: "LIST_PEERS",
	6: "CONNMANAGER",
	7: "DISCONNECT",
	8: "PUBSUB",
	9: "PERSISTENT_CONN_UPGRADE",
}

var Request_Type_value = map[string]int32{
	"IDENTIFY":                0,
	"CONNECT":                 1,
	"STREAM_OPEN":             2,
	"STREAM_HANDLER":          3,
	"DHT":                     4,
	"LIST_PEERS":              5,
	"CONNMANAGER":             6,
	"DISCONNECT":              7,
	"PUBSUB":                  8,
	"PERSISTENT_CONN_UPGRADE": 9,
}

func (x Request_Type) Enum() *Request_Type {
	p := new(Request_Type)
	*p = x
	return p
}

func (x Request_Type) String() string {
	return proto.EnumName(Request_Type_name, int32(x))
}

func (x *Request_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Request_Type_value, data, "Request_Type")
	if err != nil {
		return err
	}
	*x = Request_Type(value)
	return nil
}

func (Request_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{0, 0}
}

type Response_Type int32

const (
	Response_OK    Response_Type = 0
	Response_ERROR Response_Type = 1
)

var Response_Type_name = map[int32]string{
	0: "OK",
	1: "ERROR",
}

var Response_Type_value = map[string]int32{
	"OK":    0,
	"ERROR": 1,
}

func (x Response_Type) Enum() *Response_Type {
	p := new(Response_Type)
	*p = x
	return p
}

func (x Response_Type) String() string {
	return proto.EnumName(Response_Type_name, int32(x))
}

func (x *Response_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Response_Type_value, data, "Response_Type")
	if err != nil {
		return err
	}
	*x = Response_Type(value)
	return nil
}

func (Response_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{1, 0}
}

type DHTRequest_Type int32

const (
	DHTRequest_FIND_PEER                    DHTRequest_Type = 0
	DHTRequest_FIND_PEERS_CONNECTED_TO_PEER DHTRequest_Type = 1
	DHTRequest_FIND_PROVIDERS               DHTRequest_Type = 2
	DHTRequest_GET_CLOSEST_PEERS            DHTRequest_Type = 3
	DHTRequest_GET_PUBLIC_KEY               DHTRequest_Type = 4
	DHTRequest_GET_VALUE                    DHTRequest_Type = 5
	DHTRequest_SEARCH_VALUE                 DHTRequest_Type = 6
	DHTRequest_PUT_VALUE                    DHTRequest_Type = 7
	DHTRequest_PROVIDE                      DHTRequest_Type = 8
)

var DHTRequest_Type_name = map[int32]string{
	0: "FIND_PEER",
	1: "FIND_PEERS_CONNECTED_TO_PEER",
	2: "FIND_PROVIDERS",
	3: "GET_CLOSEST_PEERS",
	4: "GET_PUBLIC_KEY",
	5: "GET_VALUE",
	6: "SEARCH_VALUE",
	7: "PUT_VALUE",
	8: "PROVIDE",
}

var DHTRequest_Type_value = map[string]int32{
	"FIND_PEER":                    0,
	"FIND_PEERS_CONNECTED_TO_PEER": 1,
	"FIND_PROVIDERS":               2,
	"GET_CLOSEST_PEERS":            3,
	"GET_PUBLIC_KEY":               4,
	"GET_VALUE":                    5,
	"SEARCH_VALUE":                 6,
	"PUT_VALUE":                    7,
	"PROVIDE":                      8,
}

func (x DHTRequest_Type) Enum() *DHTRequest_Type {
	p := new(DHTRequest_Type)
	*p = x
	return p
}

func (x DHTRequest_Type) String() string {
	return proto.EnumName(DHTRequest_Type_name, int32(x))
}

func (x *DHTRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DHTRequest_Type_value, data, "DHTRequest_Type")
	if err != nil {
		return err
	}
	*x = DHTRequest_Type(value)
	return nil
}

func (DHTRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{10, 0}
}

type DHTResponse_Type int32

const (
	DHTResponse_BEGIN DHTResponse_Type = 0
	DHTResponse_VALUE DHTResponse_Type = 1
	DHTResponse_END   DHTResponse_Type = 2
)

var DHTResponse_Type_name = map[int32]string{
	0: "BEGIN",
	1: "VALUE",
	2: "END",
}

var DHTResponse_Type_value = map[string]int32{
	"BEGIN": 0,
	"VALUE": 1,
	"END":   2,
}

func (x DHTResponse_Type) Enum() *DHTResponse_Type {
	p := new(DHTResponse_Type)
	*p = x
	return p
}

func (x DHTResponse_Type) String() string {
	return proto.EnumName(DHTResponse_Type_name, int32(x))
}

func (x *DHTResponse_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DHTResponse_Type_value, data, "DHTResponse_Type")
	if err != nil {
		return err
	}
	*x = DHTResponse_Type(value)
	return nil
}

func (DHTResponse_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{11, 0}
}

type ConnManagerRequest_Type int32

const (
	ConnManagerRequest_TAG_PEER   ConnManagerRequest_Type = 0
	ConnManagerRequest_UNTAG_PEER ConnManagerRequest_Type = 1
	ConnManagerRequest_TRIM       ConnManagerRequest_Type = 2
)

var ConnManagerRequest_Type_name = map[int32]string{
	0: "TAG_PEER",
	1: "UNTAG_PEER",
	2: "TRIM",
}

var ConnManagerRequest_Type_value = map[string]int32{
	"TAG_PEER":   0,
	"UNTAG_PEER": 1,
	"TRIM":       2,
}

func (x ConnManagerRequest_Type) Enum() *ConnManagerRequest_Type {
	p := new(ConnManagerRequest_Type)
	*p = x
	return p
}

func (x ConnManagerRequest_Type) String() string {
	return proto.EnumName(ConnManagerRequest_Type_name, int32(x))
}

func (x *ConnManagerRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ConnManagerRequest_Type_value, data, "ConnManagerRequest_Type")
	if err != nil {
		return err
	}
	*x = ConnManagerRequest_Type(value)
	return nil
}

func (ConnManagerRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{13, 0}
}

type PSRequest_Type int32

const (
	PSRequest_GET_TOPICS PSRequest_Type = 0
	PSRequest_LIST_PEERS PSRequest_Type = 1
	PSRequest_PUBLISH    PSRequest_Type = 2
	PSRequest_SUBSCRIBE  PSRequest_Type = 3
)

var PSRequest_Type_name = map[int32]string{
	0: "GET_TOPICS",
	1: "LIST_PEERS",
	2: "PUBLISH",
	3: "SUBSCRIBE",
}

var PSRequest_Type_value = map[string]int32{
	"GET_TOPICS": 0,
	"LIST_PEERS": 1,
	"PUBLISH":    2,
	"SUBSCRIBE":  3,
}

func (x PSRequest_Type) Enum() *PSRequest_Type {
	p := new(PSRequest_Type)
	*p = x
	return p
}

func (x PSRequest_Type) String() string {
	return proto.EnumName(PSRequest_Type_name, int32(x))
}

func (x *PSRequest_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PSRequest_Type_value, data, "PSRequest_Type")
	if err != nil {
		return err
	}
	*x = PSRequest_Type(value)
	return nil
}

func (PSRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{15, 0}
}

type Request struct {
	Type                 *Request_Type         `protobuf:"varint,1,req,name=type,enum=p2pd.pb.Request_Type" json:"type,omitempty"`
	Connect              *ConnectRequest       `protobuf:"bytes,2,opt,name=connect" json:"connect,omitempty"`
	StreamOpen           *StreamOpenRequest    `protobuf:"bytes,3,opt,name=streamOpen" json:"streamOpen,omitempty"`
	StreamHandler        *StreamHandlerRequest `protobuf:"bytes,4,opt,name=streamHandler" json:"streamHandler,omitempty"`
	Dht                  *DHTRequest           `protobuf:"bytes,5,opt,name=dht" json:"dht,omitempty"`
	ConnManager          *ConnManagerRequest   `protobuf:"bytes,6,opt,name=connManager" json:"connManager,omitempty"`
	Disconnect           *DisconnectRequest    `protobuf:"bytes,7,opt,name=disconnect" json:"disconnect,omitempty"`
	Pubsub               *PSRequest            `protobuf:"bytes,8,opt,name=pubsub" json:"pubsub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetType() Request_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Request_IDENTIFY
}

func (m *Request) GetConnect() *ConnectRequest {
	if m != nil {
		return m.Connect
	}
	return nil
}

func (m *Request) GetStreamOpen() *StreamOpenRequest {
	if m != nil {
		return m.StreamOpen
	}
	return nil
}

func (m *Request) GetStreamHandler() *StreamHandlerRequest {
	if m != nil {
		return m.StreamHandler
	}
	return nil
}

func (m *Request) GetDht() *DHTRequest {
	if m != nil {
		return m.Dht
	}
	return nil
}

func (m *Request) GetConnManager() *ConnManagerRequest {
	if m != nil {
		return m.ConnManager
	}
	return nil
}

func (m *Request) GetDisconnect() *DisconnectRequest {
	if m != nil {
		return m.Disconnect
	}
	return nil
}

func (m *Request) GetPubsub() *PSRequest {
	if m != nil {
		return m.Pubsub
	}
	return nil
}

type Response struct {
	Type                 *Response_Type    `protobuf:"varint,1,req,name=type,enum=p2pd.pb.Response_Type" json:"type,omitempty"`
	Error                *ErrorResponse    `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	StreamInfo           *StreamInfo       `protobuf:"bytes,3,opt,name=streamInfo" json:"streamInfo,omitempty"`
	Identify             *IdentifyResponse `protobuf:"bytes,4,opt,name=identify" json:"identify,omitempty"`
	Dht                  *DHTResponse      `protobuf:"bytes,5,opt,name=dht" json:"dht,omitempty"`
	Peers                []*PeerInfo       `protobuf:"bytes,6,rep,name=peers" json:"peers,omitempty"`
	Pubsub               *PSResponse       `protobuf:"bytes,7,opt,name=pubsub" json:"pubsub,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetType() Response_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Response_OK
}

func (m *Response) GetError() *ErrorResponse {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetStreamInfo() *StreamInfo {
	if m != nil {
		return m.StreamInfo
	}
	return nil
}

func (m *Response) GetIdentify() *IdentifyResponse {
	if m != nil {
		return m.Identify
	}
	return nil
}

func (m *Response) GetDht() *DHTResponse {
	if m != nil {
		return m.Dht
	}
	return nil
}

func (m *Response) GetPeers() []*PeerInfo {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *Response) GetPubsub() *PSResponse {
	if m != nil {
		return m.Pubsub
	}
	return nil
}

type PersistentConnectionRequest struct {
	CallId []byte `protobuf:"bytes,1,req,name=callId" json:"callId,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*PersistentConnectionRequest_AddUnaryHandler
	//	*PersistentConnectionRequest_RemoveUnaryHandler
	//	*PersistentConnectionRequest_CallUnary
	//	*PersistentConnectionRequest_UnaryResponse
	//	*PersistentConnectionRequest_Cancel
	Message              isPersistentConnectionRequest_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                              `json:"-"`
	XXX_unrecognized     []byte                                `json:"-"`
	XXX_sizecache        int32                                 `json:"-"`
}

func (m *PersistentConnectionRequest) Reset()         { *m = PersistentConnectionRequest{} }
func (m *PersistentConnectionRequest) String() string { return proto.CompactTextString(m) }
func (*PersistentConnectionRequest) ProtoMessage()    {}
func (*PersistentConnectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{2}
}
func (m *PersistentConnectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentConnectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersistentConnectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersistentConnectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentConnectionRequest.Merge(m, src)
}
func (m *PersistentConnectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *PersistentConnectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentConnectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentConnectionRequest proto.InternalMessageInfo

type isPersistentConnectionRequest_Message interface {
	isPersistentConnectionRequest_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PersistentConnectionRequest_AddUnaryHandler struct {
	AddUnaryHandler *AddUnaryHandlerRequest `protobuf:"bytes,2,opt,name=addUnaryHandler,oneof" json:"addUnaryHandler,omitempty"`
}
type PersistentConnectionRequest_RemoveUnaryHandler struct {
	RemoveUnaryHandler *RemoveUnaryHandlerRequest `protobuf:"bytes,6,opt,name=removeUnaryHandler,oneof" json:"removeUnaryHandler,omitempty"`
}
type PersistentConnectionRequest_CallUnary struct {
	CallUnary *CallUnaryRequest `protobuf:"bytes,3,opt,name=callUnary,oneof" json:"callUnary,omitempty"`
}
type PersistentConnectionRequest_UnaryResponse struct {
	UnaryResponse *CallUnaryResponse `protobuf:"bytes,4,opt,name=unaryResponse,oneof" json:"unaryResponse,omitempty"`
}
type PersistentConnectionRequest_Cancel struct {
	Cancel *Cancel `protobuf:"bytes,5,opt,name=cancel,oneof" json:"cancel,omitempty"`
}

func (*PersistentConnectionRequest_AddUnaryHandler) isPersistentConnectionRequest_Message()    {}
func (*PersistentConnectionRequest_RemoveUnaryHandler) isPersistentConnectionRequest_Message() {}
func (*PersistentConnectionRequest_CallUnary) isPersistentConnectionRequest_Message()          {}
func (*PersistentConnectionRequest_UnaryResponse) isPersistentConnectionRequest_Message()      {}
func (*PersistentConnectionRequest_Cancel) isPersistentConnectionRequest_Message()             {}

func (m *PersistentConnectionRequest) GetMessage() isPersistentConnectionRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PersistentConnectionRequest) GetCallId() []byte {
	if m != nil {
		return m.CallId
	}
	return nil
}

func (m *PersistentConnectionRequest) GetAddUnaryHandler() *AddUnaryHandlerRequest {
	if x, ok := m.GetMessage().(*PersistentConnectionRequest_AddUnaryHandler); ok {
		return x.AddUnaryHandler
	}
	return nil
}

func (m *PersistentConnectionRequest) GetRemoveUnaryHandler() *RemoveUnaryHandlerRequest {
	if x, ok := m.GetMessage().(*PersistentConnectionRequest_RemoveUnaryHandler); ok {
		return x.RemoveUnaryHandler
	}
	return nil
}

func (m *PersistentConnectionRequest) GetCallUnary() *CallUnaryRequest {
	if x, ok := m.GetMessage().(*PersistentConnectionRequest_CallUnary); ok {
		return x.CallUnary
	}
	return nil
}

func (m *PersistentConnectionRequest) GetUnaryResponse() *CallUnaryResponse {
	if x, ok := m.GetMessage().(*PersistentConnectionRequest_UnaryResponse); ok {
		return x.UnaryResponse
	}
	return nil
}

func (m *PersistentConnectionRequest) GetCancel() *Cancel {
	if x, ok := m.GetMessage().(*PersistentConnectionRequest_Cancel); ok {
		return x.Cancel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PersistentConnectionRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PersistentConnectionRequest_AddUnaryHandler)(nil),
		(*PersistentConnectionRequest_RemoveUnaryHandler)(nil),
		(*PersistentConnectionRequest_CallUnary)(nil),
		(*PersistentConnectionRequest_UnaryResponse)(nil),
		(*PersistentConnectionRequest_Cancel)(nil),
	}
}

type PersistentConnectionResponse struct {
	CallId []byte `protobuf:"bytes,1,req,name=callId" json:"callId,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*PersistentConnectionResponse_CallUnaryResponse
	//	*PersistentConnectionResponse_RequestHandling
	//	*PersistentConnectionResponse_DaemonError
	//	*PersistentConnectionResponse_Cancel
	Message              isPersistentConnectionResponse_Message `protobuf_oneof:"message"`
	XXX_NoUnkeyedLiteral struct{}                               `json:"-"`
	XXX_unrecognized     []byte                                 `json:"-"`
	XXX_sizecache        int32                                  `json:"-"`
}

func (m *PersistentConnectionResponse) Reset()         { *m = PersistentConnectionResponse{} }
func (m *PersistentConnectionResponse) String() string { return proto.CompactTextString(m) }
func (*PersistentConnectionResponse) ProtoMessage()    {}
func (*PersistentConnectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{3}
}
func (m *PersistentConnectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PersistentConnectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PersistentConnectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PersistentConnectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PersistentConnectionResponse.Merge(m, src)
}
func (m *PersistentConnectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *PersistentConnectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PersistentConnectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PersistentConnectionResponse proto.InternalMessageInfo

type isPersistentConnectionResponse_Message interface {
	isPersistentConnectionResponse_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PersistentConnectionResponse_CallUnaryResponse struct {
	CallUnaryResponse *CallUnaryResponse `protobuf:"bytes,2,opt,name=callUnaryResponse,oneof" json:"callUnaryResponse,omitempty"`
}
type PersistentConnectionResponse_RequestHandling struct {
	RequestHandling *CallUnaryRequest `protobuf:"bytes,3,opt,name=requestHandling,oneof" json:"requestHandling,omitempty"`
}
type PersistentConnectionResponse_DaemonError struct {
	DaemonError *DaemonError `protobuf:"bytes,4,opt,name=daemonError,oneof" json:"daemonError,omitempty"`
}
type PersistentConnectionResponse_Cancel struct {
	Cancel *Cancel `protobuf:"bytes,5,opt,name=cancel,oneof" json:"cancel,omitempty"`
}

func (*PersistentConnectionResponse_CallUnaryResponse) isPersistentConnectionResponse_Message() {}
func (*PersistentConnectionResponse_RequestHandling) isPersistentConnectionResponse_Message()   {}
func (*PersistentConnectionResponse_DaemonError) isPersistentConnectionResponse_Message()       {}
func (*PersistentConnectionResponse_Cancel) isPersistentConnectionResponse_Message()            {}

func (m *PersistentConnectionResponse) GetMessage() isPersistentConnectionResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PersistentConnectionResponse) GetCallId() []byte {
	if m != nil {
		return m.CallId
	}
	return nil
}

func (m *PersistentConnectionResponse) GetCallUnaryResponse() *CallUnaryResponse {
	if x, ok := m.GetMessage().(*PersistentConnectionResponse_CallUnaryResponse); ok {
		return x.CallUnaryResponse
	}
	return nil
}

func (m *PersistentConnectionResponse) GetRequestHandling() *CallUnaryRequest {
	if x, ok := m.GetMessage().(*PersistentConnectionResponse_RequestHandling); ok {
		return x.RequestHandling
	}
	return nil
}

func (m *PersistentConnectionResponse) GetDaemonError() *DaemonError {
	if x, ok := m.GetMessage().(*PersistentConnectionResponse_DaemonError); ok {
		return x.DaemonError
	}
	return nil
}

func (m *PersistentConnectionResponse) GetCancel() *Cancel {
	if x, ok := m.GetMessage().(*PersistentConnectionResponse_Cancel); ok {
		return x.Cancel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PersistentConnectionResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PersistentConnectionResponse_CallUnaryResponse)(nil),
		(*PersistentConnectionResponse_RequestHandling)(nil),
		(*PersistentConnectionResponse_DaemonError)(nil),
		(*PersistentConnectionResponse_Cancel)(nil),
	}
}

type IdentifyResponse struct {
	Id                   []byte   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Addrs                [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentifyResponse) Reset()         { *m = IdentifyResponse{} }
func (m *IdentifyResponse) String() string { return proto.CompactTextString(m) }
func (*IdentifyResponse) ProtoMessage()    {}
func (*IdentifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{4}
}
func (m *IdentifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentifyResponse.Merge(m, src)
}
func (m *IdentifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *IdentifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IdentifyResponse proto.InternalMessageInfo

func (m *IdentifyResponse) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IdentifyResponse) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type ConnectRequest struct {
	Peer                 []byte   `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Addrs                [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	Timeout              *int64   `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{5}
}
func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ConnectRequest) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

func (m *ConnectRequest) GetTimeout() int64 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

type StreamOpenRequest struct {
	Peer                 []byte   `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Proto                []string `protobuf:"bytes,2,rep,name=proto" json:"proto,omitempty"`
	Timeout              *int64   `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamOpenRequest) Reset()         { *m = StreamOpenRequest{} }
func (m *StreamOpenRequest) String() string { return proto.CompactTextString(m) }
func (*StreamOpenRequest) ProtoMessage()    {}
func (*StreamOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{6}
}
func (m *StreamOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamOpenRequest.Merge(m, src)
}
func (m *StreamOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamOpenRequest proto.InternalMessageInfo

func (m *StreamOpenRequest) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *StreamOpenRequest) GetProto() []string {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *StreamOpenRequest) GetTimeout() int64 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

type StreamHandlerRequest struct {
	Addr                 []byte   `protobuf:"bytes,1,req,name=addr" json:"addr,omitempty"`
	Proto                []string `protobuf:"bytes,2,rep,name=proto" json:"proto,omitempty"`
	Balanced             *bool    `protobuf:"varint,3,req,name=balanced" json:"balanced,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamHandlerRequest) Reset()         { *m = StreamHandlerRequest{} }
func (m *StreamHandlerRequest) String() string { return proto.CompactTextString(m) }
func (*StreamHandlerRequest) ProtoMessage()    {}
func (*StreamHandlerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{7}
}
func (m *StreamHandlerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamHandlerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamHandlerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamHandlerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamHandlerRequest.Merge(m, src)
}
func (m *StreamHandlerRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamHandlerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamHandlerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamHandlerRequest proto.InternalMessageInfo

func (m *StreamHandlerRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *StreamHandlerRequest) GetProto() []string {
	if m != nil {
		return m.Proto
	}
	return nil
}

func (m *StreamHandlerRequest) GetBalanced() bool {
	if m != nil && m.Balanced != nil {
		return *m.Balanced
	}
	return false
}

type ErrorResponse struct {
	Msg                  *string  `protobuf:"bytes,1,req,name=msg" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorResponse) Reset()         { *m = ErrorResponse{} }
func (m *ErrorResponse) String() string { return proto.CompactTextString(m) }
func (*ErrorResponse) ProtoMessage()    {}
func (*ErrorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{8}
}
func (m *ErrorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResponse.Merge(m, src)
}
func (m *ErrorResponse) XXX_Size() int {
	return m.Size()
}
func (m *ErrorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResponse proto.InternalMessageInfo

func (m *ErrorResponse) GetMsg() string {
	if m != nil && m.Msg != nil {
		return *m.Msg
	}
	return ""
}

type StreamInfo struct {
	Peer                 []byte   `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Addr                 []byte   `protobuf:"bytes,2,req,name=addr" json:"addr,omitempty"`
	Proto                *string  `protobuf:"bytes,3,req,name=proto" json:"proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamInfo) Reset()         { *m = StreamInfo{} }
func (m *StreamInfo) String() string { return proto.CompactTextString(m) }
func (*StreamInfo) ProtoMessage()    {}
func (*StreamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{9}
}
func (m *StreamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamInfo.Merge(m, src)
}
func (m *StreamInfo) XXX_Size() int {
	return m.Size()
}
func (m *StreamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StreamInfo proto.InternalMessageInfo

func (m *StreamInfo) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *StreamInfo) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *StreamInfo) GetProto() string {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return ""
}

type DHTRequest struct {
	Type                 *DHTRequest_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.DHTRequest_Type" json:"type,omitempty"`
	Peer                 []byte           `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Cid                  []byte           `protobuf:"bytes,3,opt,name=cid" json:"cid,omitempty"`
	Key                  []byte           `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Value                []byte           `protobuf:"bytes,5,opt,name=value" json:"value,omitempty"`
	Count                *int32           `protobuf:"varint,6,opt,name=count" json:"count,omitempty"`
	Timeout              *int64           `protobuf:"varint,7,opt,name=timeout" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DHTRequest) Reset()         { *m = DHTRequest{} }
func (m *DHTRequest) String() string { return proto.CompactTextString(m) }
func (*DHTRequest) ProtoMessage()    {}
func (*DHTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{10}
}
func (m *DHTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHTRequest.Merge(m, src)
}
func (m *DHTRequest) XXX_Size() int {
	return m.Size()
}
func (m *DHTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DHTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DHTRequest proto.InternalMessageInfo

func (m *DHTRequest) GetType() DHTRequest_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DHTRequest_FIND_PEER
}

func (m *DHTRequest) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DHTRequest) GetCid() []byte {
	if m != nil {
		return m.Cid
	}
	return nil
}

func (m *DHTRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *DHTRequest) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *DHTRequest) GetCount() int32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *DHTRequest) GetTimeout() int64 {
	if m != nil && m.Timeout != nil {
		return *m.Timeout
	}
	return 0
}

type DHTResponse struct {
	Type                 *DHTResponse_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.DHTResponse_Type" json:"type,omitempty"`
	Peer                 *PeerInfo         `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Value                []byte            `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DHTResponse) Reset()         { *m = DHTResponse{} }
func (m *DHTResponse) String() string { return proto.CompactTextString(m) }
func (*DHTResponse) ProtoMessage()    {}
func (*DHTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{11}
}
func (m *DHTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DHTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DHTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DHTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DHTResponse.Merge(m, src)
}
func (m *DHTResponse) XXX_Size() int {
	return m.Size()
}
func (m *DHTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DHTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DHTResponse proto.InternalMessageInfo

func (m *DHTResponse) GetType() DHTResponse_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return DHTResponse_BEGIN
}

func (m *DHTResponse) GetPeer() *PeerInfo {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *DHTResponse) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PeerInfo struct {
	Id                   []byte   `protobuf:"bytes,1,req,name=id" json:"id,omitempty"`
	Addrs                [][]byte `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerInfo) Reset()         { *m = PeerInfo{} }
func (m *PeerInfo) String() string { return proto.CompactTextString(m) }
func (*PeerInfo) ProtoMessage()    {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{12}
}
func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(m, src)
}
func (m *PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *PeerInfo) GetAddrs() [][]byte {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type ConnManagerRequest struct {
	Type                 *ConnManagerRequest_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.ConnManagerRequest_Type" json:"type,omitempty"`
	Peer                 []byte                   `protobuf:"bytes,2,opt,name=peer" json:"peer,omitempty"`
	Tag                  *string                  `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Weight               *int64                   `protobuf:"varint,4,opt,name=weight" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ConnManagerRequest) Reset()         { *m = ConnManagerRequest{} }
func (m *ConnManagerRequest) String() string { return proto.CompactTextString(m) }
func (*ConnManagerRequest) ProtoMessage()    {}
func (*ConnManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{13}
}
func (m *ConnManagerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnManagerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnManagerRequest.Merge(m, src)
}
func (m *ConnManagerRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnManagerRequest proto.InternalMessageInfo

func (m *ConnManagerRequest) GetType() ConnManagerRequest_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ConnManagerRequest_TAG_PEER
}

func (m *ConnManagerRequest) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *ConnManagerRequest) GetTag() string {
	if m != nil && m.Tag != nil {
		return *m.Tag
	}
	return ""
}

func (m *ConnManagerRequest) GetWeight() int64 {
	if m != nil && m.Weight != nil {
		return *m.Weight
	}
	return 0
}

type DisconnectRequest struct {
	Peer                 []byte   `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisconnectRequest) Reset()         { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()    {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{14}
}
func (m *DisconnectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DisconnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DisconnectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DisconnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisconnectRequest.Merge(m, src)
}
func (m *DisconnectRequest) XXX_Size() int {
	return m.Size()
}
func (m *DisconnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DisconnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DisconnectRequest proto.InternalMessageInfo

func (m *DisconnectRequest) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

type PSRequest struct {
	Type                 *PSRequest_Type `protobuf:"varint,1,req,name=type,enum=p2pd.pb.PSRequest_Type" json:"type,omitempty"`
	Topic                *string         `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Data                 []byte          `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PSRequest) Reset()         { *m = PSRequest{} }
func (m *PSRequest) String() string { return proto.CompactTextString(m) }
func (*PSRequest) ProtoMessage()    {}
func (*PSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{15}
}
func (m *PSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PSRequest.Merge(m, src)
}
func (m *PSRequest) XXX_Size() int {
	return m.Size()
}
func (m *PSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PSRequest proto.InternalMessageInfo

func (m *PSRequest) GetType() PSRequest_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PSRequest_GET_TOPICS
}

func (m *PSRequest) GetTopic() string {
	if m != nil && m.Topic != nil {
		return *m.Topic
	}
	return ""
}

func (m *PSRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type PSMessage struct {
	From                 []byte   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Seqno                []byte   `protobuf:"bytes,3,opt,name=seqno" json:"seqno,omitempty"`
	TopicIDs             []string `protobuf:"bytes,4,rep,name=topicIDs" json:"topicIDs,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature" json:"signature,omitempty"`
	Key                  []byte   `protobuf:"bytes,6,opt,name=key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PSMessage) Reset()         { *m = PSMessage{} }
func (m *PSMessage) String() string { return proto.CompactTextString(m) }
func (*PSMessage) ProtoMessage()    {}
func (*PSMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{16}
}
func (m *PSMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PSMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PSMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PSMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PSMessage.Merge(m, src)
}
func (m *PSMessage) XXX_Size() int {
	return m.Size()
}
func (m *PSMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PSMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PSMessage proto.InternalMessageInfo

func (m *PSMessage) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PSMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PSMessage) GetSeqno() []byte {
	if m != nil {
		return m.Seqno
	}
	return nil
}

func (m *PSMessage) GetTopicIDs() []string {
	if m != nil {
		return m.TopicIDs
	}
	return nil
}

func (m *PSMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PSMessage) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type PSResponse struct {
	Topics               []string `protobuf:"bytes,1,rep,name=topics" json:"topics,omitempty"`
	PeerIDs              [][]byte `protobuf:"bytes,2,rep,name=peerIDs" json:"peerIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PSResponse) Reset()         { *m = PSResponse{} }
func (m *PSResponse) String() string { return proto.CompactTextString(m) }
func (*PSResponse) ProtoMessage()    {}
func (*PSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{17}
}
func (m *PSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PSResponse.Merge(m, src)
}
func (m *PSResponse) XXX_Size() int {
	return m.Size()
}
func (m *PSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PSResponse proto.InternalMessageInfo

func (m *PSResponse) GetTopics() []string {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *PSResponse) GetPeerIDs() [][]byte {
	if m != nil {
		return m.PeerIDs
	}
	return nil
}

type CallUnaryRequest struct {
	Peer                 []byte   `protobuf:"bytes,1,req,name=peer" json:"peer,omitempty"`
	Proto                *string  `protobuf:"bytes,2,req,name=proto" json:"proto,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,req,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CallUnaryRequest) Reset()         { *m = CallUnaryRequest{} }
func (m *CallUnaryRequest) String() string { return proto.CompactTextString(m) }
func (*CallUnaryRequest) ProtoMessage()    {}
func (*CallUnaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{18}
}
func (m *CallUnaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallUnaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallUnaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallUnaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallUnaryRequest.Merge(m, src)
}
func (m *CallUnaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *CallUnaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CallUnaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CallUnaryRequest proto.InternalMessageInfo

func (m *CallUnaryRequest) GetPeer() []byte {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *CallUnaryRequest) GetProto() string {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return ""
}

func (m *CallUnaryRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type CallUnaryResponse struct {
	// Types that are valid to be assigned to Result:
	//	*CallUnaryResponse_Response
	//	*CallUnaryResponse_Error
	Result               isCallUnaryResponse_Result `protobuf_oneof:"result"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *CallUnaryResponse) Reset()         { *m = CallUnaryResponse{} }
func (m *CallUnaryResponse) String() string { return proto.CompactTextString(m) }
func (*CallUnaryResponse) ProtoMessage()    {}
func (*CallUnaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{19}
}
func (m *CallUnaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallUnaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallUnaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallUnaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallUnaryResponse.Merge(m, src)
}
func (m *CallUnaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *CallUnaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CallUnaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CallUnaryResponse proto.InternalMessageInfo

type isCallUnaryResponse_Result interface {
	isCallUnaryResponse_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CallUnaryResponse_Response struct {
	Response []byte `protobuf:"bytes,1,opt,name=response,oneof" json:"response,omitempty"`
}
type CallUnaryResponse_Error struct {
	Error []byte `protobuf:"bytes,2,opt,name=error,oneof" json:"error,omitempty"`
}

func (*CallUnaryResponse_Response) isCallUnaryResponse_Result() {}
func (*CallUnaryResponse_Error) isCallUnaryResponse_Result()    {}

func (m *CallUnaryResponse) GetResult() isCallUnaryResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *CallUnaryResponse) GetResponse() []byte {
	if x, ok := m.GetResult().(*CallUnaryResponse_Response); ok {
		return x.Response
	}
	return nil
}

func (m *CallUnaryResponse) GetError() []byte {
	if x, ok := m.GetResult().(*CallUnaryResponse_Error); ok {
		return x.Error
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CallUnaryResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CallUnaryResponse_Response)(nil),
		(*CallUnaryResponse_Error)(nil),
	}
}

type AddUnaryHandlerRequest struct {
	Proto                *string  `protobuf:"bytes,1,req,name=proto" json:"proto,omitempty"`
	Balanced             *bool    `protobuf:"varint,2,req,name=balanced" json:"balanced,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddUnaryHandlerRequest) Reset()         { *m = AddUnaryHandlerRequest{} }
func (m *AddUnaryHandlerRequest) String() string { return proto.CompactTextString(m) }
func (*AddUnaryHandlerRequest) ProtoMessage()    {}
func (*AddUnaryHandlerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{20}
}
func (m *AddUnaryHandlerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddUnaryHandlerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddUnaryHandlerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddUnaryHandlerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddUnaryHandlerRequest.Merge(m, src)
}
func (m *AddUnaryHandlerRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddUnaryHandlerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddUnaryHandlerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddUnaryHandlerRequest proto.InternalMessageInfo

func (m *AddUnaryHandlerRequest) GetProto() string {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return ""
}

func (m *AddUnaryHandlerRequest) GetBalanced() bool {
	if m != nil && m.Balanced != nil {
		return *m.Balanced
	}
	return false
}

type RemoveUnaryHandlerRequest struct {
	Proto                *string  `protobuf:"bytes,1,req,name=proto" json:"proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveUnaryHandlerRequest) Reset()         { *m = RemoveUnaryHandlerRequest{} }
func (m *RemoveUnaryHandlerRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveUnaryHandlerRequest) ProtoMessage()    {}
func (*RemoveUnaryHandlerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{21}
}
func (m *RemoveUnaryHandlerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveUnaryHandlerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveUnaryHandlerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveUnaryHandlerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveUnaryHandlerRequest.Merge(m, src)
}
func (m *RemoveUnaryHandlerRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveUnaryHandlerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveUnaryHandlerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveUnaryHandlerRequest proto.InternalMessageInfo

func (m *RemoveUnaryHandlerRequest) GetProto() string {
	if m != nil && m.Proto != nil {
		return *m.Proto
	}
	return ""
}

type DaemonError struct {
	Message              *string  `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DaemonError) Reset()         { *m = DaemonError{} }
func (m *DaemonError) String() string { return proto.CompactTextString(m) }
func (*DaemonError) ProtoMessage()    {}
func (*DaemonError) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{22}
}
func (m *DaemonError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DaemonError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DaemonError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DaemonError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DaemonError.Merge(m, src)
}
func (m *DaemonError) XXX_Size() int {
	return m.Size()
}
func (m *DaemonError) XXX_DiscardUnknown() {
	xxx_messageInfo_DaemonError.DiscardUnknown(m)
}

var xxx_messageInfo_DaemonError proto.InternalMessageInfo

func (m *DaemonError) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type Cancel struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cancel) Reset()         { *m = Cancel{} }
func (m *Cancel) String() string { return proto.CompactTextString(m) }
func (*Cancel) ProtoMessage()    {}
func (*Cancel) Descriptor() ([]byte, []int) {
	return fileDescriptor_7333f0e9b622f7df, []int{23}
}
func (m *Cancel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cancel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cancel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cancel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cancel.Merge(m, src)
}
func (m *Cancel) XXX_Size() int {
	return m.Size()
}
func (m *Cancel) XXX_DiscardUnknown() {
	xxx_messageInfo_Cancel.DiscardUnknown(m)
}

var xxx_messageInfo_Cancel proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("p2pd.pb.Request_Type", Request_Type_name, Request_Type_value)
	proto.RegisterEnum("p2pd.pb.Response_Type", Response_Type_name, Response_Type_value)
	proto.RegisterEnum("p2pd.pb.DHTRequest_Type", DHTRequest_Type_name, DHTRequest_Type_value)
	proto.RegisterEnum("p2pd.pb.DHTResponse_Type", DHTResponse_Type_name, DHTResponse_Type_value)
	proto.RegisterEnum("p2pd.pb.ConnManagerRequest_Type", ConnManagerRequest_Type_name, ConnManagerRequest_Type_value)
	proto.RegisterEnum("p2pd.pb.PSRequest_Type", PSRequest_Type_name, PSRequest_Type_value)
	proto.RegisterType((*Request)(nil), "p2pd.pb.Request")
	proto.RegisterType((*Response)(nil), "p2pd.pb.Response")
	proto.RegisterType((*PersistentConnectionRequest)(nil), "p2pd.pb.PersistentConnectionRequest")
	proto.RegisterType((*PersistentConnectionResponse)(nil), "p2pd.pb.PersistentConnectionResponse")
	proto.RegisterType((*IdentifyResponse)(nil), "p2pd.pb.IdentifyResponse")
	proto.RegisterType((*ConnectRequest)(nil), "p2pd.pb.ConnectRequest")
	proto.RegisterType((*StreamOpenRequest)(nil), "p2pd.pb.StreamOpenRequest")
	proto.RegisterType((*StreamHandlerRequest)(nil), "p2pd.pb.StreamHandlerRequest")
	proto.RegisterType((*ErrorResponse)(nil), "p2pd.pb.ErrorResponse")
	proto.RegisterType((*StreamInfo)(nil), "p2pd.pb.StreamInfo")
	proto.RegisterType((*DHTRequest)(nil), "p2pd.pb.DHTRequest")
	proto.RegisterType((*DHTResponse)(nil), "p2pd.pb.DHTResponse")
	proto.RegisterType((*PeerInfo)(nil), "p2pd.pb.PeerInfo")
	proto.RegisterType((*ConnManagerRequest)(nil), "p2pd.pb.ConnManagerRequest")
	proto.RegisterType((*DisconnectRequest)(nil), "p2pd.pb.DisconnectRequest")
	proto.RegisterType((*PSRequest)(nil), "p2pd.pb.PSRequest")
	proto.RegisterType((*PSMessage)(nil), "p2pd.pb.PSMessage")
	proto.RegisterType((*PSResponse)(nil), "p2pd.pb.PSResponse")
	proto.RegisterType((*CallUnaryRequest)(nil), "p2pd.pb.CallUnaryRequest")
	proto.RegisterType((*CallUnaryResponse)(nil), "p2pd.pb.CallUnaryResponse")
	proto.RegisterType((*AddUnaryHandlerRequest)(nil), "p2pd.pb.AddUnaryHandlerRequest")
	proto.RegisterType((*RemoveUnaryHandlerRequest)(nil), "p2pd.pb.RemoveUnaryHandlerRequest")
	proto.RegisterType((*DaemonError)(nil), "p2pd.pb.DaemonError")
	proto.RegisterType((*Cancel)(nil), "p2pd.pb.Cancel")
}

func init() { proto.RegisterFile("p2pd.proto", fileDescriptor_7333f0e9b622f7df) }

var fileDescriptor_7333f0e9b622f7df = []byte{
	// 1460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5b, 0x6f, 0xdb, 0xc6,
	0x12, 0x16, 0x49, 0x5d, 0x47, 0xb2, 0x4d, 0x6f, 0x1c, 0x87, 0x4e, 0x7c, 0x72, 0x7c, 0x08, 0xe4,
	0xc4, 0xb9, 0x1c, 0xe3, 0xc4, 0x6d, 0x81, 0xb4, 0x40, 0x0b, 0xe8, 0xc2, 0x58, 0x4c, 0x6c, 0x49,
	0x58, 0x52, 0x29, 0x02, 0x14, 0x10, 0x68, 0x71, 0xe3, 0x08, 0xb5, 0x28, 0x85, 0xa4, 0x52, 0xf8,
	0x47, 0xf4, 0xb1, 0xef, 0x7d, 0x2a, 0xd0, 0xe7, 0xbe, 0xb4, 0xff, 0xa0, 0x8f, 0xfd, 0x09, 0x85,
	0xdf, 0xfa, 0xd2, 0xdf, 0x50, 0xec, 0x8d, 0x17, 0x59, 0x4e, 0x83, 0xbe, 0xed, 0xec, 0x7c, 0x33,
	0x3b, 0x3b, 0x33, 0x3b, 0xdf, 0x02, 0xcc, 0x0f, 0xe7, 0xfe, 0xc1, 0x3c, 0x9c, 0xc5, 0x33, 0x54,
	0xe1, 0xeb, 0x53, 0xf3, 0xb2, 0x08, 0x15, 0x4c, 0xde, 0x2e, 0x48, 0x14, 0xa3, 0x07, 0x50, 0x8c,
	0x2f, 0xe6, 0xc4, 0x50, 0xf6, 0xd4, 0xfd, 0xf5, 0xc3, 0x9b, 0x07, 0x02, 0x73, 0x20, 0xf4, 0x07,
	0xee, 0xc5, 0x9c, 0x60, 0x06, 0x41, 0x4f, 0xa0, 0x32, 0x9e, 0x05, 0x01, 0x19, 0xc7, 0x86, 0xba,
	0xa7, 0xec, 0xd7, 0x0f, 0x6f, 0x25, 0xe8, 0x36, 0xdf, 0x17, 0x46, 0x58, 0xe2, 0xd0, 0x67, 0x00,
	0x51, 0x1c, 0x12, 0x6f, 0xda, 0x9f, 0x93, 0xc0, 0xd0, 0x98, 0xd5, 0xed, 0xc4, 0xca, 0x49, 0x54,
	0xd2, 0x30, 0x83, 0x46, 0x6d, 0x58, 0xe3, 0x52, 0xd7, 0x0b, 0xfc, 0x73, 0x12, 0x1a, 0x45, 0x66,
	0xfe, 0xaf, 0x25, 0x73, 0xa1, 0x95, 0x1e, 0xf2, 0x36, 0xe8, 0x1e, 0x68, 0xfe, 0x9b, 0xd8, 0x28,
	0x31, 0xd3, 0x1b, 0x89, 0x69, 0xa7, 0xeb, 0x4a, 0x03, 0xaa, 0x47, 0x9f, 0x43, 0x9d, 0x86, 0x7c,
	0xe2, 0x05, 0xde, 0x19, 0x09, 0x8d, 0x32, 0x83, 0xdf, 0xc9, 0x5d, 0x4f, 0xe8, 0xa4, 0x59, 0x16,
	0x4f, 0xaf, 0xe9, 0x4f, 0x22, 0x99, 0x9c, 0xca, 0xd2, 0x35, 0x3b, 0x89, 0x2a, 0xb9, 0x66, 0x8a,
	0x46, 0x0f, 0xa1, 0x3c, 0x5f, 0x9c, 0x46, 0x8b, 0x53, 0xa3, 0xca, 0xec, 0x50, 0x62, 0x37, 0x70,
	0x24, 0x5e, 0x20, 0xcc, 0x1f, 0x15, 0x28, 0xd2, 0x82, 0xa0, 0x06, 0x54, 0xed, 0x8e, 0xd5, 0x73,
	0xed, 0x67, 0xaf, 0xf4, 0x02, 0xaa, 0x43, 0xa5, 0xdd, 0xef, 0xf5, 0xac, 0xb6, 0xab, 0x2b, 0x68,
	0x03, 0xea, 0x8e, 0x8b, 0xad, 0xe6, 0xc9, 0xa8, 0x3f, 0xb0, 0x7a, 0xba, 0x8a, 0x10, 0xac, 0x8b,
	0x8d, 0x6e, 0xb3, 0xd7, 0x39, 0xb6, 0xb0, 0xae, 0xa1, 0x0a, 0x68, 0x9d, 0xae, 0xab, 0x17, 0xd1,
	0x3a, 0xc0, 0xb1, 0xed, 0xb8, 0xa3, 0x81, 0x65, 0x61, 0x47, 0x2f, 0x51, 0x6b, 0xea, 0xea, 0xa4,
	0xd9, 0x6b, 0x1e, 0x59, 0x58, 0x2f, 0x53, 0x40, 0xc7, 0x76, 0xa4, 0xfb, 0x0a, 0x02, 0x28, 0x0f,
	0x86, 0x2d, 0x67, 0xd8, 0xd2, 0xab, 0xe8, 0x0e, 0xdc, 0x1a, 0x58, 0xd8, 0xb1, 0x1d, 0xd7, 0xea,
	0xb9, 0x23, 0x8a, 0x19, 0x0d, 0x07, 0x47, 0xb8, 0xd9, 0xb1, 0xf4, 0x9a, 0xf9, 0x87, 0x0a, 0x55,
	0x4c, 0xa2, 0xf9, 0x2c, 0x88, 0x08, 0x7a, 0x98, 0xeb, 0xb2, 0xed, 0x4c, 0x97, 0x71, 0x40, 0xb6,
	0xcd, 0x1e, 0x43, 0x89, 0x84, 0xe1, 0x2c, 0x14, 0x4d, 0x96, 0x82, 0x2d, 0xba, 0x2b, 0x2d, 0x30,
	0x07, 0xa1, 0x8f, 0x64, 0x87, 0xd9, 0xc1, 0xeb, 0x99, 0xe8, 0xb0, 0x1b, 0x4b, 0x2d, 0x42, 0x55,
	0x38, 0x03, 0x43, 0x9f, 0x40, 0x75, 0xe2, 0x93, 0x20, 0x9e, 0xbc, 0xbe, 0x10, 0x5d, 0xb5, 0x93,
	0x98, 0xd8, 0x42, 0x91, 0x1c, 0x94, 0x40, 0xd1, 0x7f, 0xb3, 0xcd, 0xb4, 0x95, 0x6f, 0x26, 0x01,
	0x66, 0xdd, 0x74, 0x1f, 0x4a, 0x73, 0x42, 0xc2, 0xc8, 0x28, 0xef, 0x69, 0xfb, 0xf5, 0xc3, 0xcd,
	0xb4, 0xa2, 0x84, 0x84, 0x2c, 0x18, 0xae, 0x47, 0x8f, 0x92, 0xda, 0x57, 0x96, 0x02, 0xa7, 0xb5,
	0x17, 0x2e, 0x65, 0xf1, 0x77, 0x44, 0xed, 0xcb, 0xa0, 0xf6, 0x5f, 0xe8, 0x05, 0x54, 0x83, 0x92,
	0x85, 0x71, 0x1f, 0xeb, 0x8a, 0xf9, 0xad, 0x06, 0x77, 0x06, 0x24, 0x8c, 0x26, 0x51, 0x4c, 0x82,
	0x58, 0x3c, 0xc6, 0xc9, 0x4c, 0x3e, 0x2b, 0xb4, 0x0d, 0xe5, 0xb1, 0x77, 0x7e, 0x6e, 0xfb, 0xac,
	0x00, 0x0d, 0x2c, 0x24, 0xf4, 0x02, 0x36, 0x3c, 0xdf, 0x1f, 0x06, 0x5e, 0x78, 0x21, 0x1f, 0x19,
	0x4f, 0xfa, 0xbf, 0x93, 0x40, 0x9a, 0x79, 0xbd, 0xf0, 0xd8, 0x2d, 0xe0, 0x65, 0x4b, 0xe4, 0x02,
	0x0a, 0xc9, 0x74, 0xf6, 0x8e, 0xe4, 0xfc, 0xf1, 0xa7, 0x64, 0x66, 0x2a, 0xbe, 0x0c, 0x49, 0x5d,
	0xae, 0xb0, 0x47, 0x9f, 0x42, 0x8d, 0x06, 0xcb, 0xf6, 0x44, 0x79, 0xd3, 0x5a, 0xb5, 0xa5, 0x26,
	0xf5, 0x91, 0xa2, 0x51, 0x0b, 0xd6, 0x16, 0x5c, 0xc9, 0x33, 0x29, 0x4a, 0x7d, 0x7b, 0x95, 0x39,
	0x47, 0x74, 0x0b, 0x38, 0x6f, 0x82, 0x1e, 0xd0, 0xcc, 0x05, 0x63, 0x72, 0x2e, 0xaa, 0xbe, 0x91,
	0x31, 0xa6, 0xdb, 0xdd, 0x02, 0x16, 0x80, 0x56, 0x0d, 0x2a, 0x53, 0x12, 0x45, 0xde, 0x19, 0x31,
	0x7f, 0x51, 0x61, 0x77, 0x75, 0x3d, 0x84, 0xdb, 0xeb, 0x0a, 0xf2, 0x1c, 0x36, 0xc7, 0xcb, 0x41,
	0x89, 0x92, 0xbc, 0x3f, 0xec, 0xab, 0x66, 0xc8, 0x82, 0x8d, 0x50, 0xa4, 0x85, 0xe6, 0x72, 0x12,
	0x9c, 0x7d, 0x48, 0xfe, 0x96, 0x6d, 0xd0, 0x53, 0xa8, 0xfb, 0x1e, 0x99, 0xce, 0x02, 0xf6, 0xfc,
	0x44, 0x0e, 0x33, 0xcd, 0x9f, 0xea, 0xba, 0x05, 0x9c, 0x85, 0xfe, 0xc3, 0xdc, 0x3d, 0x05, 0x7d,
	0xf9, 0x09, 0xa2, 0x75, 0x50, 0x27, 0x32, 0x55, 0xea, 0xc4, 0x47, 0x5b, 0x50, 0xf2, 0x7c, 0x3f,
	0x8c, 0x0c, 0x75, 0x4f, 0xdb, 0x6f, 0x60, 0x2e, 0x98, 0x2e, 0xac, 0xe7, 0x79, 0x08, 0x21, 0x28,
	0xd2, 0x87, 0x26, 0x2c, 0xd9, 0x7a, 0xb5, 0x2d, 0x32, 0xa0, 0x12, 0x4f, 0xa6, 0x64, 0xb6, 0x88,
	0x59, 0x92, 0x34, 0x2c, 0x45, 0xf3, 0x4b, 0xd8, 0xbc, 0xc2, 0x53, 0xd7, 0x39, 0x66, 0x3c, 0xcb,
	0x1c, 0xd7, 0x30, 0x17, 0xde, 0xe3, 0xf8, 0x2b, 0xd8, 0x5a, 0xc5, 0x60, 0xd4, 0x37, 0x8d, 0x49,
	0xfa, 0xa6, 0xeb, 0x6b, 0x7c, 0xdf, 0x86, 0xea, 0xa9, 0x77, 0x4e, 0x33, 0xe8, 0x1b, 0xda, 0x9e,
	0xba, 0x5f, 0xc5, 0x89, 0x6c, 0xfe, 0x07, 0xd6, 0x72, 0xf3, 0x12, 0xe9, 0xa0, 0x4d, 0xa3, 0x33,
	0xe6, 0xb5, 0x86, 0xe9, 0xd2, 0x7c, 0x0e, 0x90, 0xce, 0xc7, 0x95, 0x57, 0x92, 0xa1, 0xa8, 0xab,
	0x42, 0xd1, 0x98, 0x27, 0x2e, 0x98, 0x7f, 0xaa, 0x00, 0x29, 0xa9, 0xa2, 0xc7, 0xb9, 0x79, 0x6f,
	0xac, 0xe0, 0xdd, 0xec, 0xc4, 0x97, 0x47, 0xd3, 0x46, 0x97, 0x47, 0xeb, 0xa0, 0x8d, 0x27, 0x3e,
	0xcb, 0x59, 0x03, 0xd3, 0x25, 0xdd, 0xf9, 0x9a, 0xf0, 0x79, 0xdd, 0xc0, 0x74, 0x49, 0x43, 0x79,
	0xe7, 0x9d, 0x2f, 0x08, 0xeb, 0xaf, 0x06, 0xe6, 0x02, 0xdd, 0x1d, 0xcf, 0x16, 0x41, 0xcc, 0x46,
	0x4f, 0x09, 0x73, 0x21, 0x5b, 0x87, 0x4a, 0xbe, 0x0e, 0x3f, 0x49, 0x52, 0x5d, 0x83, 0xda, 0x33,
	0xbb, 0xd7, 0x61, 0x5c, 0xa8, 0x17, 0xd0, 0x1e, 0xec, 0x26, 0xa2, 0x33, 0x12, 0x0c, 0x68, 0x75,
	0x46, 0x6e, 0x9f, 0x23, 0x14, 0xca, 0xac, 0x1c, 0x81, 0xfb, 0x2f, 0xed, 0x0e, 0x25, 0x50, 0x15,
	0xdd, 0x84, 0xcd, 0x23, 0xcb, 0x1d, 0xb5, 0x8f, 0xfb, 0x8e, 0x95, 0xf0, 0xaa, 0x46, 0xa1, 0x74,
	0x7b, 0x30, 0x6c, 0x1d, 0xdb, 0xed, 0xd1, 0x0b, 0xeb, 0x95, 0x5e, 0xa4, 0xe7, 0xd1, 0xbd, 0x97,
	0xcd, 0xe3, 0xa1, 0xa5, 0x97, 0x90, 0x0e, 0x0d, 0xc7, 0x6a, 0xe2, 0x76, 0x57, 0xec, 0x94, 0x29,
	0x60, 0x30, 0x94, 0x80, 0x0a, 0xa5, 0x79, 0x71, 0x92, 0x5e, 0x35, 0xbf, 0x57, 0xa0, 0x9e, 0x21,
	0x1e, 0xf4, 0xbf, 0x5c, 0xc6, 0x77, 0x56, 0x91, 0x53, 0x36, 0xe5, 0xf7, 0x32, 0x29, 0x5f, 0xc9,
	0x50, 0x49, 0x4f, 0xf3, 0x0c, 0x6b, 0x99, 0x0c, 0x9b, 0xf7, 0x44, 0xc2, 0x6a, 0x50, 0x6a, 0x59,
	0x47, 0x76, 0x8f, 0x93, 0x11, 0x0f, 0x53, 0xa1, 0x7f, 0x0b, 0xab, 0xd7, 0xd1, 0x55, 0xf3, 0xff,
	0x50, 0x95, 0xee, 0x3e, 0xf0, 0x05, 0xff, 0xac, 0x00, 0xba, 0xfa, 0xd7, 0x42, 0x1f, 0xe7, 0xee,
	0xb6, 0xf7, 0x9e, 0x6f, 0xd9, 0x07, 0x74, 0x55, 0xec, 0xf1, 0x39, 0x58, 0xc3, 0x74, 0x49, 0x27,
	0xf1, 0x37, 0x64, 0x72, 0xf6, 0x26, 0x66, 0x8d, 0xa5, 0x61, 0x21, 0x99, 0x07, 0xe9, 0x4f, 0xcb,
	0x6d, 0x1e, 0xc9, 0x9e, 0x58, 0x07, 0x18, 0xf6, 0x12, 0x59, 0x41, 0x55, 0x28, 0xba, 0xd8, 0x3e,
	0xd1, 0x55, 0xf3, 0x3e, 0x6c, 0x5e, 0xf9, 0xe7, 0xad, 0x7a, 0x53, 0xe6, 0x0f, 0x0a, 0xd4, 0x92,
	0x9f, 0x1d, 0x7a, 0x94, 0xbb, 0xda, 0xad, 0xab, 0x7f, 0xbf, 0xec, 0x8d, 0xb6, 0xa0, 0x14, 0xcf,
	0xe6, 0x93, 0x31, 0xbb, 0x52, 0x0d, 0x73, 0x81, 0x1e, 0xe2, 0x7b, 0xb1, 0x27, 0x4a, 0xc4, 0xd6,
	0x66, 0x4b, 0x44, 0xbf, 0x0e, 0x40, 0x5b, 0xcc, 0xed, 0x0f, 0xec, 0xb6, 0xc3, 0xe3, 0xcf, 0x7c,
	0xf7, 0x14, 0xd6, 0x52, 0xb4, 0x25, 0x9d, 0xae, 0xae, 0xd2, 0x76, 0x73, 0x86, 0x2d, 0xa7, 0x8d,
	0xed, 0x96, 0xa5, 0x6b, 0xe6, 0x77, 0x2c, 0xd0, 0x13, 0x3e, 0x96, 0xe9, 0x29, 0xaf, 0xc3, 0xd9,
	0xd4, 0x50, 0xf8, 0x29, 0x74, 0x9d, 0x9c, 0xac, 0xa6, 0x27, 0xd3, 0x18, 0x23, 0xf2, 0x36, 0x98,
	0xc9, 0x8e, 0x61, 0x02, 0x9d, 0x54, 0x2c, 0x58, 0xbb, 0x13, 0x19, 0x45, 0x36, 0xc2, 0x12, 0x19,
	0xed, 0x42, 0x2d, 0x9a, 0x9c, 0x05, 0x5e, 0xbc, 0x08, 0xe5, 0x4b, 0x4e, 0x37, 0xe4, 0xab, 0x2f,
	0x27, 0xaf, 0xde, 0xfc, 0x02, 0x20, 0xfd, 0x1d, 0xd1, 0xfa, 0x31, 0x4f, 0x91, 0xa1, 0x30, 0xbf,
	0x42, 0xa2, 0xef, 0x9d, 0xa6, 0x9b, 0x1e, 0xc8, 0x5b, 0x4c, 0x8a, 0xe6, 0x00, 0xf4, 0x65, 0xde,
	0xfb, 0xbb, 0x79, 0x9e, 0x0e, 0xba, 0x4c, 0xb6, 0xd5, 0x24, 0xdb, 0x0e, 0x6c, 0x5e, 0xe1, 0x64,
	0xb4, 0x0b, 0xd5, 0x50, 0x32, 0x38, 0x4b, 0x5a, 0xb7, 0x80, 0x93, 0x1d, 0xb4, 0x9d, 0xfd, 0xe4,
	0x52, 0x15, 0x17, 0x5b, 0x55, 0x28, 0x87, 0x24, 0x5a, 0x9c, 0xc7, 0xe6, 0x73, 0xd8, 0x5e, 0xfd,
	0xf7, 0x4a, 0x03, 0x53, 0xb2, 0x81, 0x65, 0xc9, 0x40, 0x5d, 0x22, 0x83, 0x27, 0xb0, 0x73, 0xed,
	0xbf, 0x6b, 0xb5, 0x3b, 0xf3, 0x3e, 0xd4, 0x33, 0xd4, 0x4e, 0xd3, 0x29, 0x08, 0x9a, 0x5d, 0xa6,
	0x86, 0x13, 0xbe, 0xae, 0x42, 0x99, 0xd3, 0x79, 0xab, 0xf1, 0xeb, 0xe5, 0x5d, 0xe5, 0xb7, 0xcb,
	0xbb, 0xca, 0xef, 0x97, 0x77, 0x95, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb6, 0xcb, 0x90, 0x8f,
	0x7a, 0x0e, 0x00, 0x00,
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pubsub != nil {
		{
			size, err := m.Pubsub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Disconnect != nil {
		{
			size, err := m.Disconnect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ConnManager != nil {
		{
			size, err := m.ConnManager.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Dht != nil {
		{
			size, err := m.Dht.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StreamHandler != nil {
		{
			size, err := m.StreamHandler.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StreamOpen != nil {
		{
			size, err := m.StreamOpen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Connect != nil {
		{
			size, err := m.Connect.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	} else {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Pubsub != nil {
		{
			size, err := m.Pubsub.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Peers) > 0 {
		for iNdEx := len(m.Peers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Peers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintP2Pd(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Dht != nil {
		{
			size, err := m.Dht.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Identify != nil {
		{
			size, err := m.Identify.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StreamInfo != nil {
		{
			size, err := m.StreamInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Error != nil {
		{
			size, err := m.Error.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	} else {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PersistentConnectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentConnectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CallId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("callId")
	} else {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentConnectionRequest_AddUnaryHandler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionRequest_AddUnaryHandler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AddUnaryHandler != nil {
		{
			size, err := m.AddUnaryHandler.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionRequest_CallUnary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionRequest_CallUnary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CallUnary != nil {
		{
			size, err := m.CallUnary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionRequest_UnaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionRequest_UnaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UnaryResponse != nil {
		{
			size, err := m.UnaryResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionRequest_Cancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionRequest_Cancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancel != nil {
		{
			size, err := m.Cancel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionRequest_RemoveUnaryHandler) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionRequest_RemoveUnaryHandler) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RemoveUnaryHandler != nil {
		{
			size, err := m.RemoveUnaryHandler.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PersistentConnectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.CallId == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("callId")
	} else {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PersistentConnectionResponse_CallUnaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionResponse_CallUnaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CallUnaryResponse != nil {
		{
			size, err := m.CallUnaryResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionResponse_RequestHandling) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionResponse_RequestHandling) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RequestHandling != nil {
		{
			size, err := m.RequestHandling.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionResponse_DaemonError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionResponse_DaemonError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DaemonError != nil {
		{
			size, err := m.DaemonError.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *PersistentConnectionResponse_Cancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PersistentConnectionResponse_Cancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Cancel != nil {
		{
			size, err := m.Cancel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *IdentifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeout != nil {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	} else {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeout != nil {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Timeout))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Proto) > 0 {
		for iNdEx := len(m.Proto) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proto[iNdEx])
			copy(dAtA[i:], m.Proto[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Proto[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	} else {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamHandlerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamHandlerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamHandlerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Balanced == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("balanced")
	} else {
		i--
		if *m.Balanced {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Proto) > 0 {
		for iNdEx := len(m.Proto) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proto[iNdEx])
			copy(dAtA[i:], m.Proto[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Proto[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Addr == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("addr")
	} else {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ErrorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Msg == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("msg")
	} else {
		i -= len(*m.Msg)
		copy(dAtA[i:], *m.Msg)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Msg)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Proto == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	} else {
		i -= len(*m.Proto)
		copy(dAtA[i:], *m.Proto)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Proto)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Addr == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("addr")
	} else {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	} else {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DHTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Timeout != nil {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Timeout))
		i--
		dAtA[i] = 0x38
	}
	if m.Count != nil {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Count))
		i--
		dAtA[i] = 0x30
	}
	if m.Value != nil {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Key != nil {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x22
	}
	if m.Cid != nil {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	} else {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DHTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DHTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DHTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		{
			size, err := m.Peer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintP2Pd(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	} else {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PeerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addrs) > 0 {
		for iNdEx := len(m.Addrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addrs[iNdEx])
			copy(dAtA[i:], m.Addrs[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Addrs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Id == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	} else {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConnManagerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnManagerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnManagerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Weight != nil {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Weight))
		i--
		dAtA[i] = 0x20
	}
	if m.Tag != nil {
		i -= len(*m.Tag)
		copy(dAtA[i:], *m.Tag)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Tag)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Peer != nil {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	} else {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DisconnectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DisconnectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DisconnectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	} else {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Topic != nil {
		i -= len(*m.Topic)
		copy(dAtA[i:], *m.Topic)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Topic)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	} else {
		i = encodeVarintP2Pd(dAtA, i, uint64(*m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PSMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PSMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Key != nil {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x32
	}
	if m.Signature != nil {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TopicIDs) > 0 {
		for iNdEx := len(m.TopicIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TopicIDs[iNdEx])
			copy(dAtA[i:], m.TopicIDs[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.TopicIDs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Seqno != nil {
		i -= len(m.Seqno)
		copy(dAtA[i:], m.Seqno)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Seqno)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Data != nil {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.From != nil {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PeerIDs) > 0 {
		for iNdEx := len(m.PeerIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PeerIDs[iNdEx])
			copy(dAtA[i:], m.PeerIDs[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.PeerIDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Topics[iNdEx])
			copy(dAtA[i:], m.Topics[iNdEx])
			i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Topics[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CallUnaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallUnaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallUnaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("data")
	} else {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Proto == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	} else {
		i -= len(*m.Proto)
		copy(dAtA[i:], *m.Proto)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Proto)))
		i--
		dAtA[i] = 0x12
	}
	if m.Peer == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	} else {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallUnaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallUnaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallUnaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CallUnaryResponse_Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallUnaryResponse_Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Response != nil {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CallUnaryResponse_Error) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallUnaryResponse_Error) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Error != nil {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AddUnaryHandlerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddUnaryHandlerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddUnaryHandlerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Balanced == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("balanced")
	} else {
		i--
		if *m.Balanced {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Proto == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	} else {
		i -= len(*m.Proto)
		copy(dAtA[i:], *m.Proto)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Proto)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveUnaryHandlerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveUnaryHandlerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveUnaryHandlerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Proto == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	} else {
		i -= len(*m.Proto)
		copy(dAtA[i:], *m.Proto)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Proto)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DaemonError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DaemonError) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DaemonError) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Message != nil {
		i -= len(*m.Message)
		copy(dAtA[i:], *m.Message)
		i = encodeVarintP2Pd(dAtA, i, uint64(len(*m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cancel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cancel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cancel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintP2Pd(dAtA []byte, offset int, v uint64) int {
	offset -= sovP2Pd(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovP2Pd(uint64(*m.Type))
	}
	if m.Connect != nil {
		l = m.Connect.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.StreamOpen != nil {
		l = m.StreamOpen.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.StreamHandler != nil {
		l = m.StreamHandler.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Dht != nil {
		l = m.Dht.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.ConnManager != nil {
		l = m.ConnManager.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Disconnect != nil {
		l = m.Disconnect.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Pubsub != nil {
		l = m.Pubsub.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovP2Pd(uint64(*m.Type))
	}
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.StreamInfo != nil {
		l = m.StreamInfo.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Identify != nil {
		l = m.Identify.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Dht != nil {
		l = m.Dht.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.Pubsub != nil {
		l = m.Pubsub.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersistentConnectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != nil {
		l = len(m.CallId)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersistentConnectionRequest_AddUnaryHandler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AddUnaryHandler != nil {
		l = m.AddUnaryHandler.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionRequest_CallUnary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallUnary != nil {
		l = m.CallUnary.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionRequest_UnaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnaryResponse != nil {
		l = m.UnaryResponse.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionRequest_Cancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancel != nil {
		l = m.Cancel.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionRequest_RemoveUnaryHandler) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoveUnaryHandler != nil {
		l = m.RemoveUnaryHandler.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallId != nil {
		l = len(m.CallId)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PersistentConnectionResponse_CallUnaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CallUnaryResponse != nil {
		l = m.CallUnaryResponse.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionResponse_RequestHandling) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestHandling != nil {
		l = m.RequestHandling.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionResponse_DaemonError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DaemonError != nil {
		l = m.DaemonError.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *PersistentConnectionResponse_Cancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cancel != nil {
		l = m.Cancel.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *IdentifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.Timeout != nil {
		n += 1 + sovP2Pd(uint64(*m.Timeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if len(m.Proto) > 0 {
		for _, s := range m.Proto {
			l = len(s)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.Timeout != nil {
		n += 1 + sovP2Pd(uint64(*m.Timeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamHandlerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Addr != nil {
		l = len(m.Addr)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if len(m.Proto) > 0 {
		for _, s := range m.Proto {
			l = len(s)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.Balanced != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ErrorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = len(*m.Msg)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Addr != nil {
		l = len(m.Addr)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Proto != nil {
		l = len(*m.Proto)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovP2Pd(uint64(*m.Type))
	}
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Cid != nil {
		l = len(m.Cid)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Count != nil {
		n += 1 + sovP2Pd(uint64(*m.Count))
	}
	if m.Timeout != nil {
		n += 1 + sovP2Pd(uint64(*m.Timeout))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DHTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovP2Pd(uint64(*m.Type))
	}
	if m.Peer != nil {
		l = m.Peer.Size()
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Value != nil {
		l = len(m.Value)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = len(m.Id)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if len(m.Addrs) > 0 {
		for _, b := range m.Addrs {
			l = len(b)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ConnManagerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovP2Pd(uint64(*m.Type))
	}
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Tag != nil {
		l = len(*m.Tag)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Weight != nil {
		n += 1 + sovP2Pd(uint64(*m.Weight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DisconnectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += 1 + sovP2Pd(uint64(*m.Type))
	}
	if m.Topic != nil {
		l = len(*m.Topic)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PSMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = len(m.From)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Seqno != nil {
		l = len(m.Seqno)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if len(m.TopicIDs) > 0 {
		for _, s := range m.TopicIDs {
			l = len(s)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.Signature != nil {
		l = len(m.Signature)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Key != nil {
		l = len(m.Key)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, s := range m.Topics {
			l = len(s)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if len(m.PeerIDs) > 0 {
		for _, b := range m.PeerIDs {
			l = len(b)
			n += 1 + l + sovP2Pd(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CallUnaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Peer != nil {
		l = len(m.Peer)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Proto != nil {
		l = len(*m.Proto)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Data != nil {
		l = len(m.Data)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CallUnaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		n += m.Result.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CallUnaryResponse_Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		l = len(m.Response)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *CallUnaryResponse_Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = len(m.Error)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	return n
}
func (m *AddUnaryHandlerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proto != nil {
		l = len(*m.Proto)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.Balanced != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RemoveUnaryHandlerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proto != nil {
		l = len(*m.Proto)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DaemonError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		l = len(*m.Message)
		n += 1 + l + sovP2Pd(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cancel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovP2Pd(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozP2Pd(x uint64) (n int) {
	return sovP2Pd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Request_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Request_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Connect == nil {
				m.Connect = &ConnectRequest{}
			}
			if err := m.Connect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamOpen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamOpen == nil {
				m.StreamOpen = &StreamOpenRequest{}
			}
			if err := m.StreamOpen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamHandler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamHandler == nil {
				m.StreamHandler = &StreamHandlerRequest{}
			}
			if err := m.StreamHandler.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dht", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dht == nil {
				m.Dht = &DHTRequest{}
			}
			if err := m.Dht.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnManager", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnManager == nil {
				m.ConnManager = &ConnManagerRequest{}
			}
			if err := m.ConnManager.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disconnect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Disconnect == nil {
				m.Disconnect = &DisconnectRequest{}
			}
			if err := m.Disconnect.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubsub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubsub == nil {
				m.Pubsub = &PSRequest{}
			}
			if err := m.Pubsub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v Response_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= Response_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &ErrorResponse{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamInfo == nil {
				m.StreamInfo = &StreamInfo{}
			}
			if err := m.StreamInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identify", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Identify == nil {
				m.Identify = &IdentifyResponse{}
			}
			if err := m.Identify.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dht", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dht == nil {
				m.Dht = &DHTResponse{}
			}
			if err := m.Dht.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &PeerInfo{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubsub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubsub == nil {
				m.Pubsub = &PSResponse{}
			}
			if err := m.Pubsub.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentConnectionRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentConnectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentConnectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = append(m.CallId[:0], dAtA[iNdEx:postIndex]...)
			if m.CallId == nil {
				m.CallId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddUnaryHandler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AddUnaryHandlerRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionRequest_AddUnaryHandler{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallUnary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallUnaryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionRequest_CallUnary{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnaryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallUnaryResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionRequest_UnaryResponse{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cancel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionRequest_Cancel{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoveUnaryHandler", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RemoveUnaryHandlerRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionRequest_RemoveUnaryHandler{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("callId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PersistentConnectionResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PersistentConnectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PersistentConnectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = append(m.CallId[:0], dAtA[iNdEx:postIndex]...)
			if m.CallId == nil {
				m.CallId = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallUnaryResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallUnaryResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionResponse_CallUnaryResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHandling", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &CallUnaryRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionResponse_RequestHandling{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaemonError", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DaemonError{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionResponse_DaemonError{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cancel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cancel{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &PersistentConnectionResponse_Cancel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("callId")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentifyResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timeout = &v
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamOpenRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timeout = &v
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamHandlerRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamHandlerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamHandlerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proto = append(m.Proto, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balanced", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Balanced = &b
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("addr")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("balanced")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Msg = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("msg")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Proto = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("addr")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHTRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v DHTRequest_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DHTRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = append(m.Cid[:0], dAtA[iNdEx:postIndex]...)
			if m.Cid == nil {
				m.Cid = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Timeout = &v
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DHTResponse) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DHTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DHTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v DHTResponse_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= DHTResponse_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peer == nil {
				m.Peer = &PeerInfo{}
			}
			if err := m.Peer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addrs = append(m.Addrs, make([]byte, postIndex-iNdEx))
			copy(m.Addrs[len(m.Addrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("id")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnManagerRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnManagerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnManagerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v ConnManagerRequest_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= ConnManagerRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Tag = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Weight = &v
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DisconnectRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DisconnectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DisconnectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var v PSRequest_Type
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= PSRequest_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Type = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Topic = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("type")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seqno = append(m.Seqno[:0], dAtA[iNdEx:postIndex]...)
			if m.Seqno == nil {
				m.Seqno = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicIDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicIDs = append(m.TopicIDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerIDs = append(m.PeerIDs, make([]byte, postIndex-iNdEx))
			copy(m.PeerIDs[len(m.PeerIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallUnaryRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallUnaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallUnaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Proto = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("peer")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("data")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallUnaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallUnaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallUnaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Result = &CallUnaryResponse_Response{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := make([]byte, postIndex-iNdEx)
			copy(v, dAtA[iNdEx:postIndex])
			m.Result = &CallUnaryResponse_Error{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddUnaryHandlerRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddUnaryHandlerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddUnaryHandlerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Proto = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balanced", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.Balanced = &b
			hasFields[0] |= uint64(0x00000002)
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("balanced")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveUnaryHandlerRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveUnaryHandlerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveUnaryHandlerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Proto = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("proto")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DaemonError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaemonError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaemonError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthP2Pd
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthP2Pd
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Message = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cancel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cancel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cancel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipP2Pd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthP2Pd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipP2Pd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowP2Pd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowP2Pd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthP2Pd
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupP2Pd
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthP2Pd
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthP2Pd        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowP2Pd          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupP2Pd = fmt.Errorf("proto: unexpected end of group")
)
